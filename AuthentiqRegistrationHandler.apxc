/*
* Authentiq registration handler for Salesforce
* Check the wiki on https://github.com/AuthentiqID/authentiq-saleforce-registration-handler/
* to find out how to set up your SaleForce domain to use Authentiq.
* Get your credentials at https://authentiq.com/developers
* Copyright Authentiq 2017
*/

global class AuthentiqRegistrationHandler implements Auth.RegistrationHandler {
    
    static final string social_account = 'Social Sign-On';
    static final string community_profile = 'Customer Community User';
    static final string standard_profile = 'Standard User';
    
    class RegHandlerException extends Exception {}
    
    // Creates a Standard salesforce or a community user
    global User createUser(Id portalId, Auth.UserData data) {
        if(!canCreateUser(data)){
            throw new RegHandlerException('Can\'t create a user. Last name and/or email is missing from the information provided.');
        }
        
        User u = new User();
        
        prepareUserData(data, u);
        
        if (data.attributeMap.containsKey('sfdc_networkid')) {
            //We have a community id, so create a user with community access
            //TODO: explain what community access means
            //TODO: Maybe get salesforce community id scope in the Authentiq ID app?
            
            Account a;
            List < Account > accounts = [SELECT Id FROM account WHERE name =: social_account];
            if (accounts.isEmpty()) {
                //TODO: throw new RegHandlerException() here as we should not create new users on the fly?
                a = new Account(name = social_account);
                insert(a);
            } else
                a = accounts[0];
            
            Contact c = new Contact();
            c.accountId = a.Id;
            
            c.firstName = u.firstName;
            c.lastName = u.lastName;
            insert(c);
            
            //TODO: Customize the profile
            Profile p = [SELECT Id FROM profile WHERE name =: community_profile];
            u.profileId = p.Id;
            u.contactId = c.Id;
            return u;
        } else {
            //TODO: explain when this else branch is reached, and how we should proceed.
            //TODO: Customize the profile
            Profile p = [SELECT Id FROM profile WHERE name =: standard_profile];
            u.profileId = p.Id;
            return u;
        }
    }
    
    // Update the user (this is called by salesforce if the user exists)
    global void updateUser(Id userId, Id portalId, Auth.UserData data) {
        User u = new User(id = userId);              
        prepareUserData(data, u);
        update(u);
    }
    
    private void prepareUserData(Auth.UserData data, User u) {
        String givenName, lastName, email, alias;
        
        // Get email
        if (data.attributeMap.containsKey('email')){
            u.email = data.attributeMap.get('email');
            email = data.attributeMap.get('email');
        }
        //TODO: Check for email_verified and bail out otherwise using RegHandlerException
        
        // Get first name
        if (data.attributeMap.containsKey('given_name')) {
            givenName = data.attributeMap.get('given_name');
            u.firstName = givenName;
        }
        
        // Get last name
        if (data.attributeMap.containsKey('family_name')) {
            lastName = data.attributeMap.get('family_name');
            u.lastName = lastName;
        }
        
        // Create alias
        alias = givenName + lastName;
        // must be 8 characters or less
        if (alias.length() > 8) {
            u.alias = alias.toLowerCase().substring(0, 8);
        }
        else {
            u.alias = alias.toLowerCase();
        }
        
        // If there is no user id yet means we have a new user so,
        // get or generate the username depending on whether it exists or not
        // otherwise skip
        if (u.id == null && data.attributeMap.containsKey('preferred_username')){
            u.username = getPreferredUsername(data.attributeMap.get('preferred_username'));
        } else if (u.id == null) {
            u.username  = getGeneratedUsername(data.attributeMap.get('email'), alias);
        } else {
            //TODO: what now, not setting u.username??
        }
        
        // Get phone
        if(data.attributeMap.containsKey('phone_number')) {
            if(data.attributeMap.get('phone_type') == 'mobile') {
                u.mobilePhone = data.attributeMap.get('phone_number');
            } else {
                u.phone = data.attributeMap.get('phone_number');
            }
        }
        
        // Get address
        if (data.attributeMap.containsKey('address')) {
            Map<String, String> addressFields = parseMalformedNestedJSON(data.attributeMap.get('address'));
            u.street = addressFields.get('street_address');
            u.city = addressFields.get('locality');
            u.state = addressFields.get('state');
            u.country =  addressFields.get('country');
            u.postalCode = addressFields.get('postal_code');
        }
        
        // Get locale
        if (data.attributeMap.containsKey('locale')) {
            u.localeSidKey = data.attributeMap.get('locale');
            u.languageLocaleKey = data.attributeMap.get('locale');
        } else {
            u.localeSidKey = UserInfo.getLocale();
            u.languageLocaleKey = UserInfo.getLocale();
        }
        
        // Get zoneinfo
        if (data.attributeMap.containsKey('zoneinfo')) {
            u.timeZoneSidKey = data.attributeMap.get('zoneinfo');
        }
        
        // Set email encoding key to 'UTF-8'
        u.emailEncodingKey = 'UTF-8';
    }
    
    // Decide if we can create a user from the data provided
    private boolean canCreateUser(Auth.UserData data) {
        return (data != null
                && data.attributeMap.containsKey('email')
                && data.attributeMap.containsKey('family_name'));
    }
    
    // Assign the preferred username to username or
    // generate one based on the preferred username
    private String getPreferredUsername(String preferredUsername){
        if(availableUsername(preferredUsername)) {
            return preferredUsername;
        } else {
            Integer rand = Math.round(Math.random() * 100000000);
            return preferredUsername + '.' + rand;
            //TODO: better a for loop to get the first available N for preferredUsername_N. Btw: are . in name ok?
        }
    }
    
    // Assign the email to username or
    // generate one based on the alias
    private String getGeneratedUsername(String email, String alias){
        if(availableUsername(email)){
            return email;
        } else {
            Integer rand = Math.round(Math.random() * 100000000);
            return alias + '.' + rand + '@' + email.substringAfter('@');
            //TODO: loop to find first available here too?
        }
    }
    
    // Check if the username we asked for is available
    private boolean availableUsername(String availableUsername) {
        List<User> users = [select Id from User where username =:availableUsername];
        if(users.size()==1) // one user has already that user name
        {
            return false;
        }
        return true;
    }
    
    // Salesforce does not play well with nested jsons.
    // Instead of getting a JSON (e.g. for address) we get something like the following
    // {country=country, street_address=address, formatted=address\nlocality..., locality=locality, state=state, postalcode=postalcode}.
    // So, get the string inside the curly brackets and split by comma to get the array of values.
    // Then add these to a Map<String, String> by splitting each value at the first and the last '=' and trimming.
    private Map<String, String> parseMalformedNestedJSON(String value) {
        String[] arrayOfValues = value.substring(value.indexOf('{') + 1, value.indexOf('}') - 1).split(',');
        //TODO: Q: wouldnt this fail if there are commas in the values?
        Map<String, String> fields = new Map<String, String>();
        for(String item : arrayOfValues){
            String k = item.substringBefore('=').trim();
            String v = item.substringAfterLast('=').trim();
            fields.put(k, v);
        }
        return fields;
    }
}
